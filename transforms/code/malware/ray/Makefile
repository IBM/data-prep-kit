# Define the root of the local git clone for the common rules to be able 
# know where they are running from.
REPOROOT=../../../..

# Set this, before including .make.defaults, to 
#   1 if requirements reference the latest code in the data processing library 
#     in this repo (that is not yet published to pypi).	 This is the default setting.
#   0 if the transforms DPK dependencies are on wheels published to 
#     pypi (e.g. data-prep-toolkit=0.2.1)
#USE_REPO_LIB_SRC=1

# Include a library of common .transform.* targets which most
# transforms should be able to reuse.  However, feel free
# to override/redefine the rules below. 
include $(REPOROOT)/transforms/.make.transforms

# Include the common configuration for this transform
include ../transform.config

BASE_IMAGE=${RAY_BASE_IMAGE}
OS := $(shell uname -s)
ifeq ($(OS),Darwin)
venv::	.transforms.ray-venv
	@./install_clamd_mac.sh
	@echo -e "if [ ! -e /var/run/clamav/clamd.ctl ]; then\n    clamd --config-file=\$$(brew --prefix)/etc/clamav/clamd.conf\nfi" >> ./venv/bin/activate
	@sed -i '' -e "s#deactivate () {#deactivate () {\nps aux | grep \"[c]lamd --config-file=\$$(brew --prefix)/etc/clamav/clamd.conf\" | awk '{print \$$2}' | xargs kill\nrm -f /var/run/clamav/clamd.ctl#" ./venv/bin/activate
else
venv::	.transforms.ray-venv
	@sudo mkdir -p /var/run/clamav && sudo chmod 777 /var/run/clamav
	@$(DOCKER) build --target clamav-local -f Dockerfile -t clamav-local:latest .
	@echo -e "$(DOCKER) run -d --name clamav -v /var/run/clamav:/var/run/clamav clamav-local:latest" >> ./venv/bin/activate
	@echo -e "retry=0\nuntil python -c \"import clamd; clamd.ClamdUnixSocket().ping()\" > /dev/null 2>&1; do\n    sleep 3\n    retry=\$$((retry+1))\n    if [ \$$retry -gt 20 ]; then break; fi\ndone" >> ./venv/bin/activate
	@sed -i -e "s/deactivate () {/deactivate () {\nfor c in \`$(DOCKER) ps -a | grep clamav | cut -f1 -d ' '\`; do $(DOCKER) rm -f -v \$$c; done/" ./venv/bin/activate
endif

test::	.transforms.ray-test

clean:: .transforms.clean

image:: .transforms.ray-image

build:: build-dist image

publish: publish-image

publish-image:: .transforms.publish-image-ray

setup:: .transforms.setup

set-versions:
	$(MAKE) TRANSFORM_PYTHON_VERSION=$(MALWARE_PYTHON_VERSION) TOML_VERSION=$(MALWARE_RAY_VERSION) .transforms.set-versions
        
build-dist:: .defaults.build-dist 

publish-dist: .defaults.publish-dist

test-src:: .transforms.test-src

test-image:: .transforms.ray-test-image

run-cli-sample: .transforms.run-cli-ray-sample

#run-local-sample: .transforms.run-local-sample

run-local-ray-sample: .transforms.run-local-ray-sample

run-s3-ray-sample: #.transforms.run-s3-ray-sample
	@# Help: Not implemented yet
	@echo "No src/malware_s3_ray.py yet :("

minio-start:	.minio-start

kind-load-image:: .transforms.kind-load-image

docker-load-image: .defaults.docker-load-image

docker-save-image: .defaults.docker-save-image
